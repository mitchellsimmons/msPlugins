// Source scripts for access to internal globals
source "AEnewNonNumericMulti.mel";
source "AEnewMatrix.mel";


//  Description
//  -----------
//  Creates a new control for a specific element of a matrix type array attribute
global proc MRS_AEnewMatrixArrayControl(string $nodeAttrName, int $elementIndex)
{
    if ($elementIndex == -1) return;

    // Data
    string $buffer[];
    tokenize($nodeAttrName, ".", $buffer);
    string $nodeName = $buffer[0];
    string $attrName = $buffer[1];
    string $nodePlugName = $nodeAttrName + "[" + $elementIndex + "]";
    string $plugNiceName = `attributeName -nice $nodePlugName`;
    float $val[] = `getAttr $nodePlugName`;

    // Maya's default implementation uses a rowLayout however the floatFieldGrps will fit better using a formLayout instead
    string $formLayout_main = `formLayout`;

        string $columnLayout_matrix = `columnLayout -adj true`;
            
            setUITemplate -pst attributeEditorMatrixTemplate;

                // Procedure is found in "AEnewMatrix.mel"
                string $cmd = "AEupdateMatrix" + " " + $columnLayout_matrix + " " + $nodePlugName;
                floatFieldGrp -nf 4 -cc $cmd -v1 $val[0] -v2 $val[1] -v3 $val[2] -v4 $val[3] -l $plugNiceName;
                floatFieldGrp -nf 4 -cc $cmd -v1 $val[4] -v2 $val[5] -v3 $val[6] -v4 $val[7];
                floatFieldGrp -nf 4 -cc $cmd -v1 $val[8] -v2 $val[9] -v3 $val[10] -v4 $val[11];
                floatFieldGrp -nf 4 -cc $cmd -v1 $val[12] -v2 $val[13] -v3 $val[14] -v4 $val[15];

            setUITemplate -popTemplate;

        setParent ..;

        string $symbolButton = `symbolButton -image "smallTrash.png" -command ("removeMultiInstance -break true " + $nodePlugName)`;

        formLayout -e
            -attachForm $columnLayout_matrix "top" 0
            -attachForm $columnLayout_matrix "left"  0
            -attachForm $columnLayout_matrix "bottom" 0
            -attachControl $symbolButton "left"  0 $columnLayout_matrix
            -attachForm $symbolButton "top" 0
            -attachForm $symbolButton "bottom" 0
            $formLayout_main;

    setParent ..;
}


//  Description
//  -----------
//  This procedure creates a new layout for matrix array attributes and adds controls for any existing elements
//  Instead of implementing the default functionality Maya uses for compound array types (see "AEnewNonNumericMulti.mel"), we implement a custom layout
//  Our custom implementation resolves certain issues such as controls not fitting within the default layout
//  We also ensure each control is named with the correct logical index (Maya displays physical indices by default)
//  This procedure will return the name of the outermost frameLayout which should be used to access child controls
global proc string MRS_AEnewMatrixArray(string $nodeAttrName, string $annotation)
{
    // Global values
    global int $gMaxNonNumericMultis;

    // Data
    string $buffer[];
    tokenize($nodeAttrName, ".", $buffer);
    string $nodeName = $buffer[0];
    string $attrName = $buffer[1];
    string $attrNiceName = `attributeName -nice $nodeAttrName`;

    int $elementIndices[] = `getAttr -multiIndices $nodeAttrName`;
    int $numElements = size($elementIndices);

    // UI
    string $frameLayout_main = `frameLayout -collapsable true -label $attrNiceName -collapse false -annotation $annotation`;

        text -label "" -height 1;

        // Hide the columnLayout while we're creating controls
        string $columnLayout_main = `columnLayout -adj true -rowSpacing 4 -vis false`;

            // "Add New Item" button
            rowLayout -numberOfColumns 2;

                text -label "";
                // This proc adds a new element plug to the array (it exists in the "AEnewNonNumericMulti" file)
                // We then rely on the attribute editor refreshing and calling the replace proc which will result in the UI controls being added
                button -label (uiRes("m_AEnewNonNumericMulti.kAddNewItem")) -command ("AEnewNonNumericMultiAddNewItem " + $nodeName + " " + $attrName);

            setParent ..;

            // If there are more than $gMaxNonNumericMultis elements, clip them
            int $tooBig = 0;
            if ( $numElements > $gMaxNonNumericMultis )
            {
                $tooBig = $numElements - $gMaxNonNumericMultis;
                $numElements = $gMaxNonNumericMultis;
            }

            // Build controls for existing element plugs (each control will be created under a parent formLayout)
            // The commented-out AEnewNonNumericMultiCreateNewControl proc is what Maya implements by default (it does not work well with compound attributes)
            for ( $i = 0; $i < $numElements; $i++ )
                // AEnewNonNumericMultiCreateNewControl( $nodeName, $attrName, "\"\"", "AEnewMatrix", $elementIndices[$i]);
                MRS_AEnewMatrixArrayControl($nodeAttrName, $elementIndices[$i]);
            
            // Tell the user if there are elements that we cannot display
            if ( $tooBig > 0 )
                text -l `format -s $tooBig (uiRes("m_AEnewNonNumericMulti.kInsufficientRoom"))`;

        setParent ..;

        // Make the columnLayout visible
        columnLayout -e -vis true $columnLayout_main;

    setParent ..;

    return $frameLayout_main;
}