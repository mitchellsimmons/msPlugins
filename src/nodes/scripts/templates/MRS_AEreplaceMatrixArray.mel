// Source scripts for access to internal globals
source "AEreplaceNonNumericMulti.mel";
source "AEnewMatrix.mel";
source "MRS_AEnewMatrixArray.mel";

// ------ Private ------------------------------------------------------------------------------------------------------------------------------------------------

proc MRS_AEreplaceMatrixArrayControl(string $nodeAttrName, int $elementIndex, string $formLayout)
{
    if ($elementIndex == -1) return;

    // Data
    string $nodePlugName = $nodeAttrName + "[" + $elementIndex + "]";
    string $plugNiceName = `attributeName -nice $nodePlugName`;
    float $val[] = `getAttr $nodePlugName`;

    string $formLayoutChildren[] = `formLayout -q -childArray $formLayout`;
    string $columnLayout_matrix = $formLayoutChildren[0];
    string $symbolButton = $formLayoutChildren[1];
    string $floatFieldGrps[] = `columnLayout -q -childArray $columnLayout_matrix`;

    // Procedure is found in "AEnewMatrix.mel"
    string $cmd = "AEupdateMatrix" + " " + $columnLayout_matrix + " " + $nodePlugName;
    floatFieldGrp -e -nf 4 -cc $cmd -v1 $val[0] -v2 $val[1] -v3 $val[2] -v4 $val[3] -l $plugNiceName $floatFieldGrps[0];
    floatFieldGrp -e -nf 4 -cc $cmd -v1 $val[4] -v2 $val[5] -v3 $val[6] -v4 $val[7] $floatFieldGrps[1];
    floatFieldGrp -e -nf 4 -cc $cmd -v1 $val[8] -v2 $val[9] -v3 $val[10] -v4 $val[11] $floatFieldGrps[2];
    floatFieldGrp -e -nf 4 -cc $cmd -v1 $val[12] -v2 $val[13] -v3 $val[14] -v4 $val[15] $floatFieldGrps[3];

    symbolButton -e -command ("removeMultiInstance -break true " + $nodePlugName) $symbolButton;
}


// ------ Public ------------------------------------------------------------------------------------------------------------------------------------------------

//  Description
//  -----------
//  This procedure retrieves child controls from the given frameLayout, set up in the MRS_AEnewMatrixArray proc
//  It determines which child controls, if any, can be reconnected based on the number of element plugs that the old and new node has
//  It ensures each reconnected control is renamed with the correct logical index (Maya displays physical indices by default)
//  If excess controls exist after reconnections have been made, then they will be removed
//  If the new node has more element plugs than the previous node, additional controls will be added
global proc MRS_AEreplaceMatrixArray(string $nodeAttrName, string $frameLayout)
{
    // Global values
    global int $gMaxNonNumericMultis;

    // Data
    string $buffer[];
    tokenize($nodeAttrName, ".", $buffer);
    string $nodeName = $buffer[0];
    string $attrName = $buffer[1];
    string $attrNiceName = `attributeName -nice $nodeAttrName`;

    int $elementIndices[] = `getAttr -multiIndices $nodeAttrName`;
    int $numElements = size($elementIndices);

    // UI
    if (!`frameLayout -exists $frameLayout`)
        return;

    // Retrieve the main columnLayout
    string $frameLayoutChildren[] = `frameLayout -q -childArray $frameLayout`;
    string $columnLayout_main = $frameLayoutChildren[1];

    setParent $columnLayout_main;

    // Hide the columnLayout while we're modifying its children
    columnLayout -e -vis false $columnLayout_main;

    // Get the number of controls currently in the columnLayout
    string $columnLayoutChildren[] = `columnLayout -q -childArray $columnLayout_main`;

    // The first control is a row layout containing the "Add New Item" button
    // Change the button command
    if( size($columnLayoutChildren) > 0 )
    {
        setParent $columnLayoutChildren[0];
            string $firstRowLayoutChildren[] = `rowLayout -query -childArray $columnLayoutChildren[0]`;
            if( size($firstRowLayoutChildren) > 1 )
                button -e -command ("AEnewNonNumericMultiAddNewItem " + $nodeName + " " + $attrName) $firstRowLayoutChildren[1];
        setParent ..;
    }

    int $numCurrentControls = size($columnLayoutChildren);
    int $numElementControls = $numCurrentControls - 1;

    // If there are $gMaxNonNumericMultis + 1 items, we are displaying the max number of elements plus the "Add New Item" button
    // If there are $gMaxNonNumericMultis + 2 items, we are displaying the max number of elements plus the "Add New Item" button plus the "Insufficient Room" label
    // - Delete the label
    if ( $numCurrentControls == $gMaxNonNumericMultis + 2 )
    {
        deleteUI $columnLayoutChildren[$gMaxNonNumericMultis + 1];
        --$numCurrentControls;
        --$numElementControls;
    }

    // If there are more than $gMaxNonNumericMultis elements, clip them
    int $tooBig = 0;
    if ( $numElements > $gMaxNonNumericMultis )
    {
        $tooBig = $numElements - $gMaxNonNumericMultis;
        $numElements = $gMaxNonNumericMultis;
    }

    // We now either have to build more controls and reconnect all of them
    // Or we have to delete excess control and reconnect all of them
    if ($numElements >= $numElementControls)
    {
        // Reconnect the controls that we can (we pass the name of the parent formLayout created by AEnewMatrixArray proc)
        for ( $i = 0; $i < $numElementControls; $i++ )
            // AEreplaceNonNumericMultiReconnectControl($nodeName, $attrName, "\"\"", "AEreplaceMatrix", $columnLayoutChildren[$i + 1], $elementIndices[$i] );
            MRS_AEreplaceMatrixArrayControl($nodeAttrName, $elementIndices[$i], $columnLayoutChildren[$i + 1]);

        for ( $i = $numElementControls; $i < $numElements; $i++ )
            // AEnewNonNumericMultiCreateNewControl( $nodeName, $attrName, "\"\"", "AEnewMatrix", $elementIndices[$i]);
            MRS_AEnewMatrixArrayControl($nodeAttrName, $elementIndices[$i]);
    }
    else
    {
        // Reconnect the controls that we can
        for ( $i = 0; $i < $numElements; $i++ )
            // AEreplaceNonNumericMultiReconnectControl($nodeName, $attrName, "\"\"", "AEreplaceMatrix", $columnLayoutChildren[$i + 1], $elementIndices[$i] );
            MRS_AEreplaceMatrixArrayControl($nodeAttrName, $elementIndices[$i], $columnLayoutChildren[$i + 1]);

        // Delete any excess controls
        for ( $i = $numElements; $i < $numElementControls; $i++ )
            deleteUI $columnLayoutChildren[$i + 1];
    }

    // Recreate the label if there are elements that we cannot display
    if ( $tooBig > 0 )
        text -l `format -s $tooBig (uiRes("m_AEnewNonNumericMulti.kInsufficientRoom"))`;

    columnLayout -e -vis true $columnLayout_main;
}