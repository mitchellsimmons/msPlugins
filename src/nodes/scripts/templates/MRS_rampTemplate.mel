/*	Description
	-----------
	This script provides procedures for creating a gradientControl which can be attached to any ramp attribute
	- Maya does not allow nested ramp attributes to be attached to its default gradientControl
	The AE procs can be used to create a ramp control within an AE template for a node
	- This mimics the controls which are created by Maya's AEaddRampControl.mel script
	The window procs are designed to create an expanded view of the AE ramp
	- This mimics the window which is created by Maya's editRampAttribute.mel script

	Notes
	-----
	gradientControls cannot be attached to nested ramp attributes (ours is a child to a compound array so this will not be suitable)
	gradientControlNoAttrs can be attached to any ramp attribute but there is considerably more setup
	- When creating the control, we must use an optionVar to set initial ramp control points
		- If we want to edit the control points via a command we must again use an optionVar but it must have a different name to the one used previously
		- Maya does some sort of linking between the optionVar and the control which it seems we have to break by using a different name
		- Each time we create an optionVar, we should remove it after we have finished making the edit (otherwise it will persist between sessions)
	- Data held by the compound ramp attribute is not ordered in the same format as the optionVar data
		- Each ramp attribute is a compound array which has three children in the following order : position, value, interpolation
		- Each ramp control receives values from an optionVar which should consist of comma delineated strings each with the following format : value,position,interpolation
	- Each string appended to the optionVar provides data for a single ramp control point
		- The string appended at index 0 corresponds to a single control point with index 0
		- Control point indices are based on creation order, not position (ie. the index will not change from moving the control point)
	- There are three commands for the ramp control which are usually called in the following order when the user interacts with the control : keyChanged, drag, changed
		- There are a few cases where only one of these commands is called, therefore opening of undoChunks must rely on a more robust system
		- Eg. clicking in the space below the ramp just calls the changed command even though nothing has changed
*/

// ------ AE - New/Replace ------------------------------------------------------------------------------------------------------------------------------------------------

global int $MRS_Ramp_Value_OptionVarIndex = 0;
global int $MRS_Ramp_Value_DragInteraction = 0;

//	Description
//	-----------
// 	This proc will create a gradientControlNoAttr control inside a formLayout
//	It also creates attrFields which can be used to set values for the currently selected key of the ramp control
//	The noAttr version of the ramp is used because Maya does not allow gradientControls to be attached to nested ramp attributes
//	The $rampNodeAttrName should correspond to a compound array ramp attribute on the node (it is allowed to be a child if required)
global proc string MRS_ramp_AEnew(string $rampNodeAttrName)
{
	global int $MRS_Ramp_Value_OptionVarIndex;
	global int $MRS_Ramp_Value_DragInteraction;

	string $buffer[];
	tokenize($rampNodeAttrName, ".", $buffer);
	string $nodeName = $buffer[0];
	// The last entry corresponds to the compound array ramp attribute (it should not include any element plug index representing a specific control point)
	string $rampAttrName = $buffer[size($buffer) - 1];

	// Build an optionVar which will be used to set the initial control points of the gradientControl
	int $elementIndices[] = `getAttr -multiIndices $rampNodeAttrName`;
	if (size($elementIndices) == 0)
	{
		// Force an element plug into existence
		$elementIndices = {0};
		float $controlPointValues[] = `getAttr ($rampNodeAttrName + "[0]")`;
		// Note, the optionVar value order is different to the attribute order
		optionVar -stringValueAppend ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) 
			((string)$controlPointValues[1] + "," + (string)$controlPointValues[0] + "," + (string)$controlPointValues[2]);
	}
	else
	{
		// Retrieve values for each element plug
		// Because Maya optimizes array attributes, any element plugs which hold default values will not be saved with the scene (the logical index is not written to file)
		// We are going to have to assume that the user did not intentionally create a sparse array, reinstantiating these logical indices to form a contiguous array
		// Any future user interaction with the ramp control will attempt to keep the array contiguous so that the scene can be reopened in the same state as it was saved
		for ($i = 0; $i <= $elementIndices[size($elementIndices) - 1]; ++$i)
		{
			// If the logical index does not exist, it will be created
			float $controlPointValues[] = `getAttr ($rampNodeAttrName + "[" + (string)$i + "]")`;
			optionVar -stringValueAppend ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) 
				((string)$controlPointValues[1] + "," + (string)$controlPointValues[0] + "," + (string)$controlPointValues[2]);
		}
	}

	setUITemplate -pushTemplate attributeEditorTemplate;

		string $formLayout_main = `formLayout`;

			$columnLayout_fields = `columnLayout -rowSpacing 2`;

				string $attrField_selectedPosition = `attrFieldSliderGrp -label "Selected Position"
					-at ($rampNodeAttrName + "[0]." + $rampAttrName + "_Position")`;
				string $attrField_selectedValue = `attrFieldSliderGrp -label "Selected Value"
					-at ($rampNodeAttrName + "[0]." + $rampAttrName + "_FloatValue")`;
				// The visibleChangeCommand for attrEnumOptionMenuGrp does not seem to get called and it does not have a changeCommand
				// Therefore we are formatting an attrEnumOptionMenu to have a similiar appearance (ie. it is not affected by the current template)
				rowLayout -nc 1 -columnAttach 1 "right" 0 -columnWidth1 236;
					string $attrEnum_selectedInterp = `attrEnumOptionMenu -label "Selected Interp "
						-at ($rampNodeAttrName + "[0]." + $rampAttrName + "_Interp")`;
				setParent ..;

			setParent ..;

			string $gradientControl = `gradientControlNoAttr -w 145 -h 89 -optionVar ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) `;
			string $button_buildRampUI = `button -l ">" -width 23 -h 69 -c ("MRS_buildRampUI " + $rampNodeAttrName)`;

			formLayout -edit
				-attachForm $columnLayout_fields "top" 3
				-attachForm $columnLayout_fields "bottom" 0

				-attachControl $gradientControl "left" -4 $columnLayout_fields
				-attachForm $gradientControl "top" 3

				-attachControl $button_buildRampUI "left" 2 $gradientControl
				-attachForm $button_buildRampUI "top" 3

				$formLayout_main;

			// Create two controls which will be used solely to make management of scriptJobs easier
			string $text_undoScriptJobContainer = `text -manage false`;
			string $text_redoScriptJobContainer = `text -manage false`;

		setParent ..;

	setUITemplate -popTemplate;

	// Must set outside of template scope
	attrFieldSliderGrp -e -step 0.001 $attrField_selectedPosition;
	attrFieldSliderGrp -e -step 0.001 $attrField_selectedValue;

	// Delete the optionVar and increment the index (the reason for this is explained in the attrField change callback)
	optionVar -remove ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex);
	++$MRS_Ramp_Value_OptionVarIndex;

	// When a key is selected in the ramp the attrField controls should update which attribute they affect as to match the key
	string $rampCurrentKeyChangedCmd = "MRS_ramp_AEkeyChangedCallback " + $rampNodeAttrName + " " + $gradientControl + " " + 
		$attrField_selectedPosition + " " + $attrField_selectedValue + " " + $attrEnum_selectedInterp;
	gradientControlNoAttr -e -currentKeyChanged $rampCurrentKeyChangedCmd $gradientControl;

	// When the ramp changes, array attribute data should be set to match the ramp
	string $rampDragCmd = "MRS_ramp_AEdragCallback " + $rampNodeAttrName + " " + $gradientControl;
	gradientControlNoAttr -e -dragCommand $rampDragCmd $gradientControl;

	// When a mouse release event occurs for the ramp control, we must close any undo chunk that may have been created from a drag interaction
	string $rampChangeCmd = "MRS_ramp_AEchangeCallback";
	gradientControlNoAttr -e -changeCommand $rampChangeCmd $gradientControl;

	// When one of the attrField controls changes, the matching ramp control point should be updated to reflect this change
	string $attrChangedCmd = "MRS_rampAttrField_AEchangeCallback " + $rampNodeAttrName + " " + $gradientControl;
	attrFieldSliderGrp -e -changeCommand $attrChangedCmd $attrField_selectedPosition;
	attrFieldSliderGrp -e -changeCommand $attrChangedCmd $attrField_selectedValue;
	attrEnumOptionMenu -e -changeCommand $attrChangedCmd $attrEnum_selectedInterp;

	// When the user causes an undo/redo operation for a change which affects the ramp attributes, the update should be reflected on the ramp control
	// The above callbacks are not invoked for undo/redo so we can not rely on them
	string $undoRedoCmd = "MRS_ramp_AEundoRedoCallback " + $rampNodeAttrName + " " + $gradientControl;
	scriptJob -replacePrevious -parent $text_undoScriptJobContainer -event "Undo" $undoRedoCmd;
	scriptJob -replacePrevious -parent $text_redoScriptJobContainer -event "Redo" $undoRedoCmd;

	return $formLayout_main;
}


//	Description
//	-----------
// 	This proc updates the child controls of one of our custom ramp layouts so that they affect attributes on a different node
//	It updates the ramp control points, the attrField controls, callbacks and scriptJobs
global proc MRS_ramp_AEreconnect(string $rampNodeAttrName, string $formLayout_ramp)
{
	global int $MRS_Ramp_Value_OptionVarIndex;

	string $buffer[];
	tokenize($rampNodeAttrName, ".", $buffer);
	string $nodeName = $buffer[0];
	string $rampAttrName = $buffer[size($buffer) - 1];

	// Retrieve controls
	string $formLayoutChildren[] = `formLayout -q -childArray $formLayout_ramp`;
	string $columnLayout_fields = $formLayoutChildren[0];
	string $gradientControl = $formLayoutChildren[1];
	string $button_buildRampUI = $formLayoutChildren[2];
	string $text_undoScriptJobContainer = $formLayoutChildren[3];
	string $text_redoScriptJobContainer = $formLayoutChildren[4];
	string $columnLayoutFieldsChildren[] = `columnLayout -q -childArray $columnLayout_fields`;
	string $attrField_selectedPosition = $columnLayoutFieldsChildren[0];
	string $attrField_selectedValue = $columnLayoutFieldsChildren[1];
	string $rowLayout_selectedInterp = $columnLayoutFieldsChildren[2];
	string $rowLayoutInterpChildren[] = `rowLayout -q -childArray $rowLayout_selectedInterp`;
	string $attrEnum_selectedInterp = $rowLayoutInterpChildren[0];

	// Create an optionVar to update the ramp
	int $elementIndices[] = `getAttr -multiIndices $rampNodeAttrName`;
	if (size($elementIndices) == 0)
	{
		// Force an element plug into existence
		$elementIndices = {0};
		float $controlPointValues[] = `getAttr ($rampNodeAttrName + "[0]")`;
		// Note, the optionVar value order is different to the attribute order
		optionVar -stringValueAppend ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) 
			((string)$controlPointValues[1] + "," + (string)$controlPointValues[0] + "," + (string)$controlPointValues[2]);
	}
	else
	{
		// Retrieve values for each element plug
		// Again, if the array is sparse it will be made contiguous
		for ($i = 0; $i <= $elementIndices[size($elementIndices) - 1]; ++$i)
		{
			float $controlPointValues[] = `getAttr ($rampNodeAttrName + "[" + (string)$i + "]")`;
			optionVar -stringValueAppend ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) 
				((string)$controlPointValues[1] + "," + (string)$controlPointValues[0] + "," + (string)$controlPointValues[2]);
		}
	}

	// Update the ramp
	gradientControlNoAttr -e -optionVar ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) $gradientControl;

	// Remove the optionVar and increment the global for the next call
	optionVar -remove ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex);
	++$MRS_Ramp_Value_OptionVarIndex;

	// Ensure each attrField control points to the plug corresponding to the selected control point
	int $selectedKey = `gradientControlNoAttr -q -currentKey $gradientControl`;
	attrFieldSliderGrp -e -at ($rampNodeAttrName + "[" + (string)$selectedKey + "]." + $rampAttrName + "_Position") $attrField_selectedPosition;
	attrFieldSliderGrp -e -at ($rampNodeAttrName + "[" + (string)$selectedKey + "]." + $rampAttrName + "_FloatValue") $attrField_selectedValue;
	attrEnumOptionMenu -e -at ($rampNodeAttrName + "[" + (string)$selectedKey + "]." + $rampAttrName + "_Interp") $attrEnum_selectedInterp;

	// Update the button so that it points to the new node
	button -e -c ("MRS_buildRampUI " + $rampNodeAttrName) $button_buildRampUI;

	// Update the callbacks and scriptJobs
	string $rampCurrentKeyChangedCmd = "MRS_ramp_AEkeyChangedCallback " + $rampNodeAttrName + " " + $gradientControl + " " + 
		$attrField_selectedPosition + " " + $attrField_selectedValue + " " + $attrEnum_selectedInterp;
	gradientControlNoAttr -e -currentKeyChanged $rampCurrentKeyChangedCmd $gradientControl;

	string $rampDragCmd = "MRS_ramp_AEdragCallback " + $rampNodeAttrName + " " + $gradientControl;
	gradientControlNoAttr -e -dragCommand $rampDragCmd $gradientControl;

	string $rampChangeCmd = "MRS_ramp_AEchangeCallback";
	gradientControlNoAttr -e -changeCommand $rampChangeCmd $gradientControl;

	string $attrChangedCmd = "MRS_rampAttrField_AEchangeCallback " + $rampNodeAttrName + " " + $gradientControl;
	attrFieldSliderGrp -e -changeCommand $attrChangedCmd $attrField_selectedPosition;
	attrFieldSliderGrp -e -changeCommand $attrChangedCmd $attrField_selectedValue;
	attrEnumOptionMenu -e -changeCommand $attrChangedCmd $attrEnum_selectedInterp;

	// Because our scriptJobs are using replacePrevious, these will automatically override any existing scriptJobs tied to the parent controls
	string $undoRedoCmd = "MRS_ramp_AEundoRedoCallback " + $rampNodeAttrName + " " + $gradientControl;
	scriptJob -replacePrevious -parent $text_undoScriptJobContainer -event "Undo" $undoRedoCmd;
	scriptJob -replacePrevious -parent $text_redoScriptJobContainer -event "Redo" $undoRedoCmd;
}


// ------ AE - Callbacks ------------------------------------------------------------------------------------------------------------------------------------------------

//	Description
//	-----------
//	Proc is used to update the child ramp attributes for the given compound ramp attribute
//	The indices of each element plug will correspond to the indices of each control point used by the given ramp control
//	These indices are based on the creation order of control points with the lowest referencing the initial control points
//	The proc ensures that the array attribute is not sparse and removes any excess element plugs if they are no longer needed
global proc MRS_ramp_AEupdateAttrs(string $rampNodeAttrName, string $gradientControl)
{
	string $buffer[];
	tokenize($rampNodeAttrName, ".", $buffer);
	string $rampAttrName = $buffer[size($buffer) - 1];
	clear($buffer);

	string $rampValueString = `gradientControlNoAttr -q -asString $gradientControl`;
	tokenize($rampValueString, ",", $buffer);
	$numRampElements = `size($buffer)` / 3;

	// Set the values on the element plugs
	// The values are ordered based on the control point indices of the ramp which are based on the creation order of each control point
	for ($i = 0; $i < $numRampElements; ++$i)
	{
		float $position = (float)$buffer[$i * 3 + 1];
		float $value = (float)$buffer[$i * 3];
		int $interp = (int)$buffer[$i * 3 + 2];

		setAttr ($rampNodeAttrName + "[" + (string)$i + "]." + $rampAttrName + "_Position") $position;
		setAttr ($rampNodeAttrName + "[" + (string)$i + "]." + $rampAttrName + "_FloatValue") $value;
		setAttr ($rampNodeAttrName + "[" + (string)$i + "]." + $rampAttrName + "_Interp") $interp;
	}

	// Remove any excess elements
	int $elementIndices[] = `getAttr -multiIndices $rampNodeAttrName`;
	int $numElements = size($elementIndices);
	for ($i = $numRampElements; $i < $numElements; ++$i)
		removeMultiInstance -break true ($rampNodeAttrName + "[" + (string)$elementIndices[$i] + "]");
}


//	Description
//	-----------
//	This proc updates the attrField controls so that they affect the child ramp attributes associated with the currently selected ramp control point
//	It will also update the child ramp attributes associated with the given compound ramp attribute
//	There are certain situations where this callback is invoked with stale data being held by the child attributes
//	- If an initial control point is deleted, this callback will be invoked with a new control point selected, having inherited the old point's index
//	- However the element plug corresponding to this index will be holding values for the old ramp control point, therefore we need to update the attribute before proceeding
//	- An undo chunk will be opened as a result of calling the update and will be closed when the mouse is released
global proc MRS_ramp_AEkeyChangedCallback(string $rampNodeAttrName, string $gradientControl, 
	string $attrField_selectedPosition, string $attrField_selectedValue, string $attrEnum_selectedInterp)
{
	string $buffer[];
	tokenize($rampNodeAttrName, ".", $buffer);
	string $rampAttrName = $buffer[size($buffer) - 1];

	// Update the attributes with the current ramp data for the reasons described above
	MRS_ramp_AEdragCallback($rampNodeAttrName, $gradientControl);

	// The ramp index should now be referencing the values of the element plug with the same logical index
	int $currentKey = `gradientControlNoAttr -q -currentKey $gradientControl`;
	attrFieldSliderGrp -e -at ($rampNodeAttrName + "[" + (string)$currentKey + "]." + $rampAttrName + "_Position") $attrField_selectedPosition;
	attrFieldSliderGrp -e -at ($rampNodeAttrName + "[" + (string)$currentKey + "]." + $rampAttrName + "_FloatValue") $attrField_selectedValue;
	attrEnumOptionMenu -e -at ($rampNodeAttrName + "[" + (string)$currentKey + "]." + $rampAttrName + "_Interp") $attrEnum_selectedInterp;
}


//	Description
//	-----------
//	Proc is called when the user is dragging one of the ramp's control points
//	It updates the child ramp attributes associated with the given compound ramp attribute
// 	If an undo chunk has not yet been opened it will open one
global proc MRS_ramp_AEdragCallback(string $rampNodeAttrName, string $gradientControl)
{
	global int $MRS_Ramp_Value_DragInteraction;

	if ($MRS_Ramp_Value_DragInteraction == 0)
	{
		undoInfo -openChunk;
		$MRS_Ramp_Value_DragInteraction = 1;
	}

	MRS_ramp_AEupdateAttrs($rampNodeAttrName, $gradientControl);
}


//	Description
//	-----------
//	Proc is called when a mouse release event occurs on the ramp control to which this callback was registered
//	It is responsible for closing any undo chunk which was opened as the result of a drag interaction
//	It is possible that this callback is invoked without an initial drag interaction which is why we track whether a drag has occurred
global proc MRS_ramp_AEchangeCallback()
{
	global int $MRS_Ramp_Value_DragInteraction;

	if ($MRS_Ramp_Value_DragInteraction == 1)
	{
		undoInfo -closeChunk;
		$MRS_Ramp_Value_DragInteraction = 0;
	}
}

//	Description
//	-----------
//	This proc updates the ramp control when a value from one of the attrField controls changes
//	The gradientControlNoAttr command provides easy ways to update the value and interpolation type of a selected control point
//	However there is no such option to update a control point's position so we must use an optionVar to make the edit
//	As mentioned previously, we must ensure the name of the optionVar is not the same as the name used for the previous update or it will have no effect
//	For this purpose we are using a global variable which increments each time it is used to update any ramp control
global proc MRS_rampAttrField_AEchangeCallback(string $rampNodeAttrName, string $gradientControl)
{
	global int $MRS_Ramp_Value_OptionVarIndex;

	string $buffer[];
	tokenize($rampNodeAttrName, ".", $buffer);
	string $rampAttrName = $buffer[size($buffer) - 1];

	int $currentKey = `gradientControlNoAttr -q -currentKey $gradientControl`;
	float $controlPointValues[] = `getAttr ($rampNodeAttrName + "[" + (string)$currentKey + "]")`;

	// Retrieve values from the ramp control and ramp attributes and use them to build a temporary optionVar
	string $rampValueString = `gradientControlNoAttr -q -asString $gradientControl`;
	tokenize($rampValueString, ",", $buffer);
	$numRampElements = `size($buffer)` / 3;

	for ($i = 0; $i < $numRampElements; ++$i)
	{
		string $position;
		string $value;
		string $interp;

		if ($i == $currentKey)
		{
			$position = (string)$controlPointValues[0];
			$value = (string)$controlPointValues[1];
			$interp = (string)$controlPointValues[2];
		}
		else
		{
			$position = $buffer[$i * 3 + 1];
			$value = $buffer[$i * 3];
			$interp = $buffer[$i * 3 + 2];
		}

		optionVar -stringValueAppend ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) 
			($value + "," + $position + "," + $interp);
	}

	// Update the ramp
	gradientControlNoAttr -e -optionVar ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) $gradientControl;

	// Remove the optionVar and increment the global for the next call
	optionVar -remove ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex);
	++$MRS_Ramp_Value_OptionVarIndex;
}


//	Description
//	-----------
//	This proc is used to update the ramp control when an undo or redo occurs
//	It should be attached to a scriptJob for both undo and redo
global proc MRS_ramp_AEundoRedoCallback(string $rampNodeAttrName, string $gradientControl)
{
	global int $MRS_Ramp_Value_OptionVarIndex;

	// Because the scriptJob is attached to a UI it may still be invoked even if the node
	// It will only be removed once the UI has been deleted, meaning the below check is necessary
	if (`objExists $rampNodeAttrName` == 0)
		return;

	int $elementIndices[] = `getAttr -multiIndices $rampNodeAttrName`;
	int $numRampElements = size($elementIndices);

	for ($i = 0; $i < $numRampElements; ++$i)
	{
		float $controlPointValues[] = `getAttr ($rampNodeAttrName + "[" + (string)$elementIndices[$i] + "]")`;
		optionVar -stringValueAppend ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex)
			((string)$controlPointValues[1] + "," + (string)$controlPointValues[0] + "," + (string)$controlPointValues[2]);
	}

	// Update the ramp
	gradientControlNoAttr -e -optionVar ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) $gradientControl;

	// Remove the optionVar and increment the global for the next call
	optionVar -remove ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex);
	++$MRS_Ramp_Value_OptionVarIndex;
}


// ------ Window view ------------------------------------------------------------------------------------------------------------------------------------------------

global string $MRS_RampUI = "MRS_RampUI";

global proc MRS_buildRampUI(string $rampNodeAttrName)
{
	// Global values
	global int $MRS_Ramp_Value_OptionVarIndex;

	// Global controls
	global string $MRS_RampUI;
	global string $MRS_RampUI_FormLayout;
	global string $MRS_RampUI_GradientControl;
	global string $MRS_RampUI_AttrField_SelectedPosition;
	global string $MRS_RampUI_AttrField_SelectedValue;
	global string $MRS_RampUI_AttrEnum_SelectedInterp;

	string $buffer[];
	tokenize($rampNodeAttrName, ".", $buffer);
	string $nodeName = $buffer[0];
	string $rampAttrName = $buffer[size($buffer) - 1];

	if (`window -exists $MRS_RampUI`)
	{
		deleteUI $MRS_RampUI;
		//windowPref -remove $MRS_RampUI;
	}

	// Build an optionVar which will be used to set the initial control points of the gradientControl
	int $elementIndices[] = `getAttr -multiIndices $rampNodeAttrName`;
	if (size($elementIndices) == 0)
	{
		// Force an element plug into existence
		$elementIndices = {0};
		float $controlPointValues[] = `getAttr ($rampNodeAttrName + "[0]")`;
		optionVar -stringValueAppend ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) 
			((string)$controlPointValues[1] + "," + (string)$controlPointValues[0] + "," + (string)$controlPointValues[2]);
	}
	else
	{
		// Retrieve values for each element plug
		for ($i = 0; $i <= $elementIndices[size($elementIndices) - 1]; ++$i)
		{
			float $controlPointValues[] = `getAttr ($rampNodeAttrName + "[" + (string)$i + "]")`;
			optionVar -stringValueAppend ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex) 
				((string)$controlPointValues[1] + "," + (string)$controlPointValues[0] + "," + (string)$controlPointValues[2]);
		}
	}

	// Build UI
	window -widthHeight 640 200 -title $rampNodeAttrName $MRS_RampUI;

	$MRS_RampUI_FormLayout = `formLayout`;

		$MRS_RampUI_GradientControl = `gradientControlNoAttr -optionVar ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex)`;
		$MRS_RampUI_AttrField_SelectedPosition =  `attrFieldSliderGrp -label (uiRes("m_editRampAttribute.kSelectedPosition")) -step 0.01
			-cw 1 110 -cw 2 56 -cw 3 1 -cw 4 24 -at ($rampNodeAttrName + "[0]." + $rampAttrName + "_Position")`;
		$MRS_RampUI_AttrField_SelectedValue = `attrFieldSliderGrp -label (uiRes("m_editRampAttribute.kSelectedValue")) -step 0.01
			-cw 1 100 -cw 2 56 -cw 3 1 -cw 4 24 -at ($rampNodeAttrName + "[0]." + $rampAttrName + "_FloatValue")`;
		$MRS_RampUI_AttrEnum_SelectedInterp = `attrEnumOptionMenu -label (uiRes("m_editRampAttribute.kInterpolation"))
			 -at ($rampNodeAttrName + "[0]." + $rampAttrName + "_Interp")`;

		formLayout -edit
			-attachForm $MRS_RampUI_AttrEnum_SelectedInterp "bottom" 2
			-attachForm $MRS_RampUI_AttrEnum_SelectedInterp "left" 5
			-attachForm $MRS_RampUI_AttrField_SelectedValue "bottom" 2
			-attachControl $MRS_RampUI_AttrField_SelectedValue "left" 3 $MRS_RampUI_AttrEnum_SelectedInterp
			-attachForm $MRS_RampUI_AttrField_SelectedPosition "bottom" 2
			-attachControl $MRS_RampUI_AttrField_SelectedPosition "left" 10 $MRS_RampUI_AttrField_SelectedValue
			-attachForm $MRS_RampUI_GradientControl "left" 0
			-attachForm $MRS_RampUI_GradientControl "right" 0
			-attachForm $MRS_RampUI_GradientControl "top" 0
			-attachControl $MRS_RampUI_GradientControl "bottom" 2 $MRS_RampUI_AttrField_SelectedPosition
			$MRS_RampUI_FormLayout;

	setParent ..;

	// Delete the optionVar and increment the index (the reason for this is explained in the attrField change callback)
	optionVar -remove ("MRS_rampOptionVar" + (string)$MRS_Ramp_Value_OptionVarIndex);
	++$MRS_Ramp_Value_OptionVarIndex;

	// Add callbacks and scriptJobs
	string $rampCurrentKeyChangedCmd = "MRS_ramp_AEkeyChangedCallback " + $rampNodeAttrName + " " + $MRS_RampUI_GradientControl + " " + 
		$MRS_RampUI_AttrField_SelectedPosition + " " + $MRS_RampUI_AttrField_SelectedValue + " " + $MRS_RampUI_AttrEnum_SelectedInterp;
	gradientControlNoAttr -e -currentKeyChanged $rampCurrentKeyChangedCmd $MRS_RampUI_GradientControl;

	string $rampDragCmd = "MRS_ramp_AEdragCallback " + $rampNodeAttrName + " " + $MRS_RampUI_GradientControl;
	gradientControlNoAttr -e -dragCommand $rampDragCmd $MRS_RampUI_GradientControl;

	// When the mouse is released we also ensure the AE is refreshed as this window is essentially acting as a duplicate to one of the AE gradientControls
	string $rampChangeCmd = "MRS_ramp_AEchangeCallback; updateAE " + $nodeName;
	gradientControlNoAttr -e -changeCommand $rampChangeCmd $MRS_RampUI_GradientControl;

	// As with the mouse release, we ensure the AE is refreshed when one of the attrFields is updated
	string $attrChangedCmd = "MRS_rampAttrField_AEchangeCallback " + $rampNodeAttrName + " " + $MRS_RampUI_GradientControl + "; updateAE " + $nodeName;
	attrFieldSliderGrp -e -changeCommand $attrChangedCmd $MRS_RampUI_AttrField_SelectedPosition;
	attrFieldSliderGrp -e -changeCommand $attrChangedCmd $MRS_RampUI_AttrField_SelectedValue;
	attrEnumOptionMenu -e -changeCommand $attrChangedCmd $MRS_RampUI_AttrEnum_SelectedInterp;

	// Because only one instance of the window can exist, the scriptJobs will never duplicate and will always be removed with the window when it is closed
	string $undoRedoCmd = "MRS_ramp_AEundoRedoCallback " + $rampNodeAttrName + " " + $MRS_RampUI_GradientControl;
	scriptJob -replacePrevious -parent $MRS_RampUI -event "Undo" $undoRedoCmd;
	scriptJob -replacePrevious -parent $MRS_RampUI -event "Redo" $undoRedoCmd;

	showWindow;
}